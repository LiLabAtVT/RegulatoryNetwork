rm(list=ls())
setwd('~/Dropbox/VirginiaTech/')
setwd('Grant/2017_GRANT/PGRP_2017/')
setwd('DataAnalysis/GEOSRAquery/')
ls
getwd
getwd()
library(stringr)#str_extract function
library(GEOquery)
library(SRAdb)
getwd()
dat<-read.table('results/SummaryGEOseries.txt',sep=';;;',as.is=T)
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dat<-read.table('results/SummaryGEOseries.txt',sep=';',as.is=T,quote='"')
dat<-read.table('results/SummaryGEOseries.txt',sep=';',as.is=T,quote='"')
dat<-read.csv('results/SummaryGEOseries.txt',sep=';',as.is=T,quote='"')
dat<-read.csv('results/SummaryGEOseries.txt',sep=';',as.is=T,quote='"')
dat<-read.table('results/SummaryGEOseries.txt',sep=';',as.is=T,quote='"')
dat<-read.table('results/SummaryGEOseries.txt',sep=';',as.is=T,quote='\"')
dat<-read.table('results/SummaryGEOseries.txt',sep='$',as.is=T,quote='"')
dim(dat)
dat<-read.csv('results/SummaryGEOseries.txt',sep='$',as.is=T,quote='"')
dat<-read.csv('results/SummaryGEOseries.txt',sep='$',as.is=T)
dat<-read.table('results/SummaryGEOseries.txt',sep='$',as.is=T)
dat<-read.table('results/SummaryGEOseries.txt',sep='#',as.is=T)
dim(dat)
table(dat[.1])
table(dat[,1])
sort(table(dat[,1]))
sort(table(dat[,1]),decreasing=T)
out<-sort(table(dat[,1]),decreasing=T)
out
write.table(out,'results/PlatformTypes_061217.csv',sep=',')
dat[1:3,]
dim(dat)
dat<-read.table('results/SummaryGEOseries.txt',sep='#',as.is=T)
dim(dat)
dat[1:3,]
?read.table
dat<-read.table('results/SummaryGEOseries.txt',sep='#',as.is=T, comment.char=None)
dat<-read.table('results/SummaryGEOseries.txt',sep='#',as.is=T, comment.char=NONE)
dat<-read.table('results/SummaryGEOseries.txt',sep='#',as.is=T, comment.char="")
dat<-read.table('results/SummaryGEOseries.txt',sep='_',as.is=T)
dat<-read.table('results/SummaryGEOseries.txt',sep=';',as.is=T)
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dim(dat)
dat[1:3,]
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dim(dat)
dat[1:3,]
dat[1:10,1:3]
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dat[1:10,1:3]
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dat[1:10,1:3]
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dat[1:10,1:3]
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dat[1:10,1:3]
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dat[1:10,1:3]
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dat[1:10,1:3]
dat<-read.table('results/SummaryGEOseries.txt',sep=',',as.is=T,quote='"')
dat[1:10,1:3]
dat[1:10,4:6]
dat[1:10,7:8]
dat[1:10,7]
table(dat[,7])
dim(dat)
sort(table(dat[,7]),decreasing = T)
out<-sort(table(dat[,1]),decreasing=T)
out[1:5,]
out[1:5]
dat[1:10,2]
dat[1:10,3]
dat[1:10,4]
sort(table(dat[,4]),decreasing=T)
out<-sort(table(dat[,4]),decreasing=T)
out[1:10]
out<-sort(table(dat[,1]),decreasing=T)
out[1:10]
dat[1:10,4]
dat[1:10,3]
dat[1:10,2]
dat[1:10,10]
dat[1:10,9]
dat[1:10,8]
dat[11:20,8]
dim(dat)
dat[21:30,8]
dat[31:40,8]
dat[41:50,8]
dat[1:10,4]
ATH<-dat[dat[,4]=='Arabidopsis thaliana',]
dim(ATH)
ATH[1:10,]
ATH[1:10,1:4]
sort(table(ATH[,1]),decreasing=T)
setwd('~/Dropbox/VirginiaTech/Neelam/')
aveFPKM<-read.table('results/FPKM_070616/aveFPKM_071416.csv',sep=',')
colnames(aveFPKM)<-gsub('RepName','',colnames(aveFPKM))
rownames(aveFPKM)<-gsub('\\.Wm82\\.a2\\.v1','',rownames(aveFPKM))
aveFPKM[1:3,]
load('results/RData/Kmeans_FPKM_122216.RData')
ls()
dim(allkFPKM)
names(allkFPKM)
kcenter<-allkFPKM$centers
kcenter[1:3,]
aveFPKM['Glyma.05G110700',]
kcenter[35,]
plot(aveFPKM['Glyma.05G110700',],kcenter[35,])
cor(aveFPKM['Glyma.05G110700',],kcenter[35,])
cor(as.vector(aveFPKM['Glyma.05G110700',]),as.vector(kcenter[35,]))
dim(aveFPKM['Glyma.05G110700',])
dim(kcenter[35,])
kcenter[35,]
cor(as.vector(aveFPKM['Glyma.05G110700',]),kcenter[35,])
as.vector(aveFPKM['Glyma.05G110700',])
kcenter[35,]
length(kcenter[35,])
dim(kcenter[35,])
dim(aveFPKM['Glyma.05G110700',])
cor(as.numeric(aveFPKM['Glyma.05G110700',]),kcenter[35,])
edges<-read.table('results/Network/FinalEdges_061317.csv',sep=',',as.is=T)
edger[1:3,]
edges[1:3,]
dim(edges)
for(i in 1:54)
{
genen<-edges[i,1];modulen<-edges[i,2]
corgm<-cor(as.numeric(aveFPKM[genen,]),kcenter[modulen,])
print(genen,modulen,corgm)
}
genen
modulen
corgm
for(i in 1:54)
{
genen<-edges[i,1];modulen<-edges[i,2]
corgm<-cor(as.numeric(aveFPKM[genen,]),kcenter[modulen,])
print(c(genen,modulen,corgm))
}
setwd('~/Dropbox/VirginiaTech/RegNet/')
dir()
setwd("MachineLearning/")
dir()
setwd('RegulatoryNetwork/')
dir()
setwd('script/')
dir()
dir('../data/')
test<-read.table('../data/GSE10670_ave_TopVar.csv',sep=',',as.is=T)
dim(test)
test[1:3,1:3]
test<-read.table('../data/GSE10670_ave_TopVar.csv',sep=',',as.is=T,header=T)
test[1:3,1:3]
test<-read.table('../data/GSE10670_ave_TopVar.csv',sep=',',as.is=T,header=T,row.names=1)
test[1:3,1:3]
library("GeneNet")
pcor=ggm.estimate.pcor(t(dat),method = 'static')
sum(si.na(test))
sum(is.na(test))
dat<-test
pcor=ggm.estimate.pcor(t(dat),method = 'static')
require(reshape)
netmat<-pcor
dim(netmat)
elist<-melt(netmat[1:30,1:30])
elist
dim(netmat)
elist[,1]<-as.character(elist[,1])
elist[,2]<-as.character(elist[,2])
colnames(elist)<-c('regulator','target','score')
elist
out_elist<-data.frame(elist,
rank=rank(-elist[,'score']),# this give the highest score rank 1
stringsAsFactors = FALSE)
out_elist[1:10,]
out_elist<-out_elist[order(out_elist[,'score']),]
out_elist[1:10,]
out_elist<-out_elist[order(out_elist[,'score'],decreasing = TRUE),]
out
out_elist[1:10,]
out_elist<-out_elist[out_elist[,'score']<1,]
out_elist<-data.frame(elist,
rank=rank(-elist[,'score']),# this give the highest score rank 1
stringsAsFactors = FALSE)
out_elist<-out_elist[order(out_elist[,'score'],decreasing = TRUE),]
out_elist[1:10,]
out_elist[1:3,]
out_elist<-out_elist[out_elist[,'score']<1,]
dim(out_elist)
out_elist[1:3,]
elist<-melt(netmat[1:30,1:30])
elist[,1]<-as.character(elist[,1])
elist[,2]<-as.character(elist[,2])
colnames(elist)<-c('regulator','target','score')
elist<-melt(netmat[1:30,1:30]) # only use top 30 to reduce number of outputs.
# This needs to be changed to find top ranking edges in a matrix.
elist[,1]<-as.character(elist[,1])
elist[,2]<-as.character(elist[,2])
colnames(elist)<-c('regulator','target','score')
# prepare final output matrix
out_elist<-elist[elist[,'score']<1,] # remove the self connection
out_elist<-data.frame(elist,
rank=rank(-elist[,'score']),# this give the highest score rank 1
stringsAsFactors = FALSE)
out_elist<-out_elist[order(out_elist[,'score'],decreasing = TRUE),]
out_elist
out_elist[1:10,]
colnames(elist)<-c('regulator','target','score')
elist[1:3,]
out_elist<-elist[elist[,'score']<1,] # remove the self connection
out_elist[1:10,]
out_elist<-data.frame(out_elist,
rank=rank(-out_elist[,'score']),# this give the highest score rank 1
stringsAsFactors = FALSE)
out_elist<-out_elist[order(out_elist[,'score'],decreasing = TRUE),]
out_elist[1:4,]
